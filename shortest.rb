require "set"

wall, clear, goal = "#", ".", "X"

grid = ["####################################################################################################",
"###   ########################################################################  ######    ######   #",
"##     #####  ######################################################## #    ##  #####      #####   #",
"#       ####      ####  ###########################################          #  ###        ###### ##",
"#####    ###       ###  ###########################################       ##     #         ###### ##",
"#######  ######     ##    ##############  ## ####################        ###     #          ####  ##",
"#######   #####     ###    ############        #################          ##   ##           ####  ##",
"########  ######     ###   #############       ####      ######        ##      ##  ##             ##",
"########    ###            ##############     ####       # ###         ##     ###  ##            ###",
"#########   ###             ######   ####     ####  ##                 ##    ###   ##           ####",
"####### ##                   #  ##    ####    #### ##                 ###         ##         #######",
"######  ###       #                    #####  #### ##         #      ###         ##         ########",
"#  ###  #######  ###                    ####  #### ###       ##      ##          #         #########",
"#   ##   ##############                 ####  #### ####             ###                    #########",
"#          ############         ##         #  #### ####             #       ##  ####              ##",
"# #    #    ############         #            ###  ###        ####           #######               #",
"####   ###    ##########         ##           ##   ###          ###          ####            ###   #",
"####    ###   ##########         ##            #   ###           ##          ###              #    #",
"#####  #####  ##########         ##    #                                  #####    ##          #####",
"#####  #####  ##  ######         ###   ##                     ##    #   ######    ####         #####",
"####    ####       ########        ##  ####                   #    ############   ###           ####",
"####    #####       #######        ##   ####                 #    #############    ##            ###",
"####   X######       ##   #              ###                #   ####  #########                  ###",
"#############                                              #    ###    ## #####                 ####",
"##############     #                  #                          #        #####     ###         ####",
"###############   ###   ######        ##      ####                       ####     #####         ####",
"#########    ##    ### #######        ##  #    ###                        ###    ######    ##    ###",
"##########      #    #########        ##  ##                      #       ##   #########  ####  ####",
"###   #####    ###   ########          #                        ####          #########   ##########",
"###   ######    ###  ########                                   ###           ##########  ##########",
"###    #####    ###    # ###                              #     ###        #########################",
"####  #####      ###     ###                              ##   ####     ## ###  #############   ####",
"####   #####       ###   ###             ##  ##           ##   ####   #######     ##########      ##",
"####   #####  ##    ##           ##       # ####              #####   #####       ##########   #####",
"#####        ####   ###          ##        #   #             #######   #####       ########    #####",
"#####        #####    ####                     ##            ########   ####   #  ####           ###",
"#####         ####    #####                            ##      ######    ##   ########       #   ###",
"#####                 ######          ##  ##    ##     ##     #######         ##########    ###   ##",
"######               ###  ###         ### ##   ###            ##  ###          ##########   ##   ###",
"######           #   ##   ###         ###      ### #  #   ###  #  ###          #########   ###  ####",
"##     ####     ##         ##        ###         # ####  ####    #####        ##########  #####  ###",
"#     ######   ####         #        ###     #     ###   ###     ###  #        ########     ###  ###",
"#     ######  ######                #######  ##    ###  ###        #   #       ######        #######",
"##    ###############            #   ######             ###           #        #####     #   ###  ##",
"#    #################       ##  ##   ##  ##            ###          ##     #####     ####   ##    #",
"#### ##   #############      ##   ##  #   ###           ##          ####   #####     ####        ###",
"######    ###### #######     ##  ###       #####       ##          #####      ##     ####       ####",
"#######    ####   ##### #     #######     ######       ###         ######           #####         ##",
"#######     #       ##   #   # #####          #       ####           ##            ####### ### ## ##",
"#####                       #   ###           #      ###                          ##################",
"####     #                  ##               ###                                              ######",
"###   ######     ########    # ####    ###   ####       ##           ########    #########     #####",
"##    #####      #######        ####   ###   ####        #            ######    #########      #####",
"##    #####    #   #####        #####         ##            ##       #########  ##########      ####",
"###  ####    ###   #########   ######                       ##          #######   ##########       #",
"##  #####    #### #########    #######                 ##   ##    #    #######      ######### #    #",
"##  #####    #########  ####    ###             ##   #####  ###  ###   #######  #    ######### ## ##",
"#   ###    ##########   ####     #               #    ####  ###         #####   ##      #####   ####",
"##   ##   #########      ###        ####               ###   ##         #####    ##     #####    ###",
"###  ### ########             ###   ###                #### ###    #     ###########      ##     ###",
"###  ############            ###   ###       ###    #    ######   ###     ##########               #",
"###  ###########    ##       ##   #####     ###    ###    ######  ######  ##########               #",
"################   ####     ###   ###       ###    ####    #####      ####     ####           ##   #",
"#################   ####    ###   ###       ####            #####       ##                   ####  #",
"########  ######     ###    ###  ######     #####           ########               ##         ######",
"######     ####     ####     #########       ###   ####      ########           #  ####   #     ####",
"####                ##        ########       ###   ####       #######          ##   ###  ###      ##",
"##                        ## #########      ##    ######        ##            ###        ###       #",
"###                     #############   #   ##   #######         #           #####       ####     ##",
"####                    ############   ###  #   ########                     ######       ###      #",
"###                      ##########   #        ########                      #######       ##      #",
"###                    ###########   ##       ########                     #########        #      #",
"###                   ############   ##     ###########      ###  ##      #########                #",
"##           ##       ###  ########  ##    #  ##########     ###   #      #########                #",
"#          ####               ###### #   ###   #########   ##            ############ #  ####   #  #",
"#  ###    #####               #######    ###   ########## ####              #### ####### #####  ## #",
"######    #####               #####     ###    ##########  ####            #####  #         ##   ###",
"#####    ######                 ###             #######    #####         ### ###             ##  ###",
"####   ########                 ##   ##                     ####          #  ###             ##   ##",
"####  ###### ####   ##         ###   ##      #          ### #####  ##        ###             ###  ##",
"####  #####   ####  #####     ###   ###########         ########   ###  ##  ####         ##  ### ###",
"###   ######   ##    ####      ##   ###########          ######     ##   #######       ####   ######",
"##   ########        ####      ##   #############       ######      ###   #######      ####     ####",
"##  ## ## ####       ##        ##  #######    ###      ##########   ####    ######       ###    ####",
"#   #       ###               #######  ##            ###########     ####    ####              #####",
"##  #        ##                #####    ##          ###########        ####   ####          #  #####",
"#    #        #                 ###      ##         ############ #      ####  #####         ########",
"## ###       ##         ##     ###       ##      # #### ##########       ####  #####         #######",
"#####        ###       ###    ####       ####   ## ###    #######           ###  ####         ######",
"###           #         #    #####       ##### ### ##      #####     ##      ##  #####  ##   #######",
"###                         ######       ######### ##     ####      ####### ####  #########   ######",
"##   ##                      ####         #####  # ###   ###         ##  ######   ########     # ###",
"###  ######                   ##          ####     ###   ####            ######      ####         ##",
"###  ######        ###        ##        #####      ##    ####             #######     ##         ###",
"###  #######        ###   #             #####              ##      ##      #  ######             ###",
"######### ##         #####               ####                     #####       ######             ###",
"########             #####   #          ###                   #   #####        ##  #             ###",
"#######              #####   ##        ####                  ##   ###     ##   ##                 ##",
"###########  ## ##   #####   #####    ########### ###   #######  ####  ######  ##    ##     #### ###",
"####################################################################################################"]
$width, $height = grid[0].length, grid.length

def bfs(grid, start)
    queue = Queue.new
    queue << [start]
    seen = Set.new([start])
    while queue
        begin
            path = queue.pop(non_block = true)
        rescue ThreadError
            return nil
        end
        x, y = path[-1]
        if grid[y][x] == "X"
            return path
        end
        for x2, y2 in [[x+1, y], [x-1, y], [x, y+1], [x,y-1]]
            if (0 <= x2 && x2 < $width) && (0 <= y2 && y2 < $height) && (grid[y2][x2] != "#") && !seen.include?([x2, y2])
                queue << (path + [[x2, y2]])
                seen.add([x2, y2])
            end
        end
    end
end

path = bfs(grid, [40, 89])
# [(5, 2), (4, 2), (4, 3), (4, 4), (5, 4), (6, 4)]
p path

if path != nil
    for x, y in path[1..path.length - 2] # path
    	grid[y][x] = "."
    end

    for i in grid
    	puts i
    end
end